module BinaryComplex;

type <typescript> "number" from "" as number;

type <typescript> "string" from "" as string;
type <typescript> "boolean" from "" as boolean;

global protocol Adder(role Client, role Svr) {
  choice at Client {
    ADD(number, number) from Client to Svr;
    RES(number) from Svr to Client;
    do Adder(Client, Svr);
  } or {
    QUIT(string) from Client to Svr;
    choice at Svr {
      THANKS(string) from Svr to Client;
    } or {
      TERMINATE() from Svr to Client;
    }
  }
}

global protocol Calculator(role Svr, role Client) {
  choice at Client {
    Add(number, number) from Client to Svr;
    Sum(number) from Svr to Client;
    do Calculator(Svr, Client);
  } or {
    Mult(number, number) from Client to Svr;
    Product(number) from Svr to Client;
    do Calculator(Svr, Client);
  } or {
    Double(number) from Client to Svr;
    Double(number) from Svr to Client;
    do Calculator(Svr, Client);
  } or {
    Quit() from Client to Svr;
    Terminate() from Svr to Client;
  }
}

global protocol CompactCalculator(role Svr, role Client) {
  choice at Client {
    Add(number, number) from Client to Svr;
    Res(number) from Svr to Client;
    do CompactCalculator(Svr, Client);
  } or {
    Mult(number, number) from Client to Svr;
    Res(number) from Svr to Client;
    do CompactCalculator(Svr, Client);
  } or {
    Double(number) from Client to Svr;
    Res(number) from Svr to Client;
    do CompactCalculator(Svr, Client);
  } or {
    Quit() from Client to Svr;
    Terminate() from Svr to Client;
  }
}

global protocol 2FA(role Svr, role Client) {
	Login(string, string) from Client to Svr;
	choice at Svr {
		Authorised() from Svr to Client;
		// do Main(Svr, Client);	
	} or {
		Challenge(string)	from Svr to Client;
		Response(number) 	from Client to Svr;
		choice at Svr {
			Authorised() from Svr to Client;
			// do Main(Svr, Client);
		} or {
			AccessDenied() from Svr to Client;
		}
	} or {
		AccessDenied() from Svr to Client;	
	}
}