enum Labels {
  {% for label in state.labels -%}
  {{ label }} = '{{ label }}',
  {%- endfor %}
};

{% for action in state.actions.values() -%}
type {{ action.label ~ 'Message' }} = {
  label: Labels.{{ action.label }},
  payload: []
}
{% endfor %}

type Message = {% for label in state.labels -%}{{ label ~ 'Message' ~ (' | ' if not loop.last else '') }}{%- endfor %}

export function buildStateHandler(
  next: EfsmNextStateHandler,
  register: (messageHandler: MessageHandler) => void
  ) {

  return (handler: S{{ state.id }}) => {
    // Define message handler.
    const messageHandler = (message: any) => {
      
      const parsedMessage = JSON.parse(message) as Message;
      switch (parsedMessage.label) {
        {% for action in state.actions.values() -%}
        case Labels.{{ action.label }}: {
          const successor = handler[parsedMessage.label]();
          {% if efsm.is_send_state(action.succ) -%}
          return next(SendState.S{{ action.succ }})(successor);
          {% elif efsm.is_receive_state(action.succ) -%}
          return next(ReceiveState.S{{ action.succ }})(successor);
          {% else -%}
          return next(TerminalState.S{{ action.succ }})(successor);
          {% endif %}
        }
        {%- endfor %}
      }
    }

    register(messageHandler);
  }
}