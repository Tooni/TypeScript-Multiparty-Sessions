// ==============
// Protocol roles
// ==============

export enum Roles {
  {% for role in efsm.other_roles -%}
  {{ role }} = "{{ role }}" {{ ', ' if not loop.last else '' }}
  {%- endfor %}
};

// ==============
// Message labels
// ==============

export namespace Labels {
  {% for state in efsm.receive_states -%}
  export enum S{{ state.id }} 
  {
    {% for label in state.labels -%}
    {{ label }} = "{{ label }}" {{ ', ' if not loop.last else '' }}
    {%- endfor %}
  };
  {%- endfor %}
  {% for state in efsm.send_states -%}
  export enum S{{ state.id }} 
  {
    {% for label in state.labels -%}
    {{ label }} = "{{ label }}" {{ ', ' if not loop.last else '' }}
    {%- endfor %}
  };
  {%- endfor %}
};

// ======
// States
// ======

export enum SendState {
  {% for state in efsm.send_states -%}
  S{{ state.id }} = 'S{{ state.id }}',
  {%- endfor %}
};

export enum ReceiveState {
  {% for state in efsm.receive_states -%}
  S{{ state.id }} = 'S{{ state.id }}',
  {%- endfor %}
};

export enum TerminalState {
  {% if efsm.has_terminal_state() -%}
  S{{ efsm.terminal_state.id }} = 'S{{ efsm.terminal_state.id }}',
  {%- endif %}
};

export type State = SendState | ReceiveState | TerminalState

// ===============
// Implementations
// ===============
{% if efsm.has_terminal_state() -%}
type _Terminate = 'Terminate';
export const Terminate: _Terminate = 'Terminate';
export type S{{ efsm.terminal_state.id }} = _Terminate;
{% endif -%}

{% for state in efsm.send_states -%}
export type S{{ state.id }} = {% for action in state.actions -%}
[Labels.S{{ state.id }}.{{ action.label }}, S{{ action.succ }}]{{ '|' if not loop.last else '' }}
{%- endfor %};
{% endfor -%}

{% for state in efsm.receive_states -%}
export type S{{ state.id }} = {
  {% for action in state.actions -%}
  [Labels.S{{ state.id }}.{{ action.label }}]: () => S{{ action.succ }}{{ ',' if not loop.last else '' }}
  {%- endfor %}
};
{% endfor %}

export type SendImplementation = {% for state in efsm.send_states -%}
S{{ state.id }} {{ '|' if not loop.last else '' }}
{%- endfor %};

export type ReceiveImplementation = {% for state in efsm.receive_states -%}
S{{ state.id }} {{ '|' if not loop.last else '' }}
{%- endfor %};

{% if efsm.has_terminal_state() -%}
export type TerminalImplementation = S{{ efsm.terminal_state.id }};
{%- endif %}
export type Implementation<S extends State> = 
  S extends ReceiveState ? ReceiveImplementation : 
  S extends SendState ? SendImplementation : {{ 'TerminalImplementation' if efsm.has_terminal_state() else 'never' }};

// =============
// State Modules
// =============

{% for state in efsm.send_states -%}
import * as ModuleS{{ state.id }} from './S{{ state.id }}';
{% endfor %}
{% for state in efsm.receive_states -%}
import * as ModuleS{{ state.id }} from './S{{ state.id }}';
{% endfor %}

export const stateModule = {
  {% for state in efsm.send_states -%}
  [SendState.S{{ state.id }}]: ModuleS{{ state.id }},
  {%- endfor %}
  {% for state in efsm.receive_states -%}
  [ReceiveState.S{{ state.id }}]: ModuleS{{ state.id }},
  {%- endfor %}
}