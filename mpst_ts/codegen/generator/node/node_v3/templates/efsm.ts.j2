{% for type in endpoint.types -%}
import { {{ type.external ~ ((' as ' ~ type.alias) if type.external != type.alias else '') }} } from "{{ type.path }}";
{% endfor %}

import {
  FromPromise,
  MaybePromise,
} from "./types";

// ==============
// Protocol roles
// ==============

export namespace Roles {

  type Self = "{{ endpoint.role }}";

  // Constant value for value comparisons
  export const Self: Self = "{{ endpoint.role }}";

  export enum Peers {
    {% for role in endpoint.efsm.other_roles -%}
    {{ role }} = "{{ role }}",
    {%- endfor %}
  };

  export type All = Self | Peers;

  export type PeersToMapped<Value> = {
    [Role in Peers]: Value
  };
};

// ==============
// Message labels
// ==============

export namespace Labels {
  {% for state in endpoint.efsm.receive_states -%}
  export enum S{{ state.id }} 
  {
    {% for label in state.labels -%}
    {{ label }} = "{{ label }}",
    {%- endfor %}
  };
  {% endfor %}
  {% for state in endpoint.efsm.send_states -%}
  export enum S{{ state.id }} 
  {
    {% for label in state.labels -%}
    {{ label }} = "{{ label }}",
    {%- endfor %}
  };
  {% endfor %}
};

// =======
// Message
// =======
export namespace Message {
{% for state in endpoint.efsm.nonterminal_states %}
  {% for action in state.actions -%}
  export interface S{{ state ~ action.label }} {
    label: Labels.S{{ state }}.{{ action.label }},
    payload: [{{ action.payloads|join(', ') }}],
  };
  {% endfor %}
  export type S{{ state }} = {% for action in state.actions -%}
  | S{{ state ~ action.label }}{% endfor %};
{% endfor %}

  export interface ConnectRequest {
    connect: Roles.Peers
  };

  export const ConnectConfirm = {
    connected: true
  };

  export interface Channel {
    role: Roles.All
    label: string
    payload: any[]
  };

  export const toChannel = (role: Roles.All, label: string, payload: any[]) => (
    { role, label, payload }
  );
};

// ================
// Message handlers
// ================

export namespace Handler {
  {% for state in endpoint.efsm.send_states -%}
  export type S{{ state }} =
    MaybePromise<{% for action in state.actions -%}
    | [Labels.S{{ state }}.{{ action.label }}, Message.S{{ state ~ action.label }}['payload'], Implementation.S{{ action.succ }}]
    {%- endfor %}>;
  {% endfor %}
  {% for state in endpoint.efsm.receive_states -%}
  export interface S{{ state }} {
    {% for action in state.actions -%}
    [Labels.S{{ state }}.{{ action.label }}]: (...payload: Message.S{{ state ~ action.label }}['payload']) => MaybePromise<Implementation.S{{ action.succ }}>,
    {% endfor %}
  }
  {% endfor %}
};

// ===========
//
// ===========

abstract class ISend {
  type: 'Send' = 'Send';
  abstract performSend(
    next: EfsmTransitionHandler,
    cancel: (reason?: any) => void,
    send: (role: Roles.Peers, label: string, payload: any[]) => void
  ): void;
}

abstract class IReceive {
  type: 'Receive' = 'Receive';
  abstract prepareReceive(
    next: EfsmTransitionHandler,
    cancel: (reason?: any) => void,
    register: (from: Roles.Peers, messageHandler: MessageHandler) => void
  ): void;
}

abstract class ITerminal {
  type: 'Terminal' = 'Terminal';
}

// =================================
// "Implementation"
// := wrapper around message handler
// =================================

export namespace Implementation {

  export type Type = ISend | IReceive | ITerminal;

  {% for state in endpoint.efsm.states -%}
  {% if endpoint.efsm.is_send_state(state) -%}
  export class S{{ state }} extends ISend {

    constructor(private handler: Handler.S{{ state }}) {
      super();
    }

    performSend(
      next: EfsmTransitionHandler,
      cancel: (reason?: any) => void,
      send: (role: Roles.Peers, label: string, payload: any[]) => void
    ) {
      const thunk = ([label, payload, successor]: FromPromise<Handler.S{{ state }}>) => {
        send(Roles.Peers.{{ state.role }}, label, payload);
        return next(successor);
      }
      if (this.handler instanceof Promise) {
        // Asynchronous implementation -- wait for completion
        this.handler.then(thunk).catch(cancel);
      } else {
        try {
          thunk(this.handler);
        } catch (error) {
          cancel(error);
        }
      }
    }

  }
  {% elif endpoint.efsm.is_receive_state(state) -%}
  export class S{{ state }} extends IReceive {

    constructor(private handler: Handler.S{{ state }}) {
      super();
    }

    prepareReceive(
      next: EfsmTransitionHandler,
      cancel: (reason?: any) => void,
      register: (from: Roles.Peers, messageHandler: MessageHandler) => void
    ) {
      const messageHandler = (message: any) => {
        const parsedMessage = JSON.parse(message) as Message.S{{ state.id }};
        switch (parsedMessage.label) {
          {% for action in state.actions -%}
          case Labels.S{{ state }}.{{ action.label }}: {
            try {
              const successor = this.handler[parsedMessage.label](...parsedMessage.payload);
              if (successor instanceof Promise) {
                successor.then(next).catch(cancel);
              } else {
                next(successor);
              }
            } catch (error) {
              cancel(error);
            }
            return;
          }
          {% endfor %}
        }
      }

      register(Roles.Peers.{{ state.role }}, messageHandler);
    }

  }
  {% else -%}
  export class S{{ state }} extends ITerminal {
  }
  {% endif -%}
  {%- endfor %}

  // Type aliases for annotation
  // Const aliases for constructor
  export type Initial = S{{ endpoint.efsm.initial_state }};
  export const Initial = S{{ endpoint.efsm.initial_state }};
  {% if endpoint.efsm.has_terminal_state -%}
  export type Terminal = S{{ endpoint.efsm.terminal_state }};
  export const Terminal = S{{ endpoint.efsm.terminal_state }};
  {% endif -%}
}

// =============
// Runtime types
// =============

export type EfsmTransitionHandler = (implementation: Implementation.Type) => void
export type MessageHandler = (message: any) => void