import WebSocket from 'ws';

import {
  Implementation,
  Message,
  MessageHandler,
  Roles,
} from './EFSM';

import * as Cancellation from './Cancellation';

// ===============
// WebSocket Types
// ===============

type RoleToSocket = Roles.PeersToMapped<WebSocket>;
type RoleToMessageQueue = Roles.PeersToMapped<any[]>;
type RoleToHandlerQueue = Roles.PeersToMapped<MessageHandler[]>;

interface WebSocketMessage {
  data: any
  type: string
  target: WebSocket
};

// ==========
// Connection
// ==========

export class {{ endpoint.role }}
{

  private wss: WebSocket.Server
  private waiting: Set<Roles.Peers>
  private roleToSocket: Partial<RoleToSocket>
  private cancellation: (role: Roles.All, reason?: any) => void

  constructor(wss: WebSocket.Server,
              initialState: Implementation.S{{ endpoint.efsm.initial_state.id }},
              cancellation: (role: Roles.All, reason?: any) => void)
  {
    this.wss = wss;
    this.waiting = new Set<Roles.Peers>([{% for role in endpoint.efsm.other_roles %}Roles.Peers.{{ role ~ (',' if not loop.last else '') }}{% endfor %}]);
    this.cancellation = cancellation;

    this.roleToSocket = {
      {% for role in endpoint.efsm.other_roles -%}
      [Roles.Peers.{{ role }}]: undefined,
      {%- endfor %}
    };

    const socketToRole = new Map<WebSocket, Roles.Peers>();

    // Handle event of socket closing when waiting for
    // other participants.
    const onClose = (event: WebSocket.CloseEvent) => {
      const { target: socket } = event;
      socket.removeAllListeners();

      const role = socketToRole.get(socket);
      if (role !== undefined) {
        // Wait for this role again
        this.waiting.add(role);
      }
    }

    const onSubscribe = (event: WebSocketMessage) => {
      const { data, target: socket } = event;
      const { connect: role } = JSON.parse(data) as Message.ConnectInvite;
      if (!this.waiting.has(role)) {
        // Role already occupied

        socket.removeAllListeners();

        socket.close(Cancellation.Emit.ROLE_OCCUPIED);

        return;
      }

      this.roleToSocket[role] = socket;

      socketToRole.set(socket, role);

      this.waiting.delete(role);

      if (this.waiting.size === 0) {
        // Execute protocol
        new Session(this.wss, this.roleToSocket as RoleToSocket, cancellation, initialState);
      }
    }

    const onConnection = (ws: WebSocket) => {
      ws.onmessage = onSubscribe;
      ws.onclose = onClose;
    };

    // Remove previous connection listeners
    this.wss.removeAllListeners();
    this.wss.addListener('connection', onConnection);
  }

}

// =======
// Session
// =======

class Session {

  private wss: WebSocket.Server
  private roleToSocket: RoleToSocket
  private cancellation: (role: Roles.All, reason?: any) => void
  
  private initialState: Implementation.S{{ endpoint.efsm.initial_state.id }}
  private messageQueue: RoleToMessageQueue
  private handlerQueue: RoleToHandlerQueue

  private activeRoles: Set<Roles.Peers>

  constructor(wss: WebSocket.Server,
              roleToSocket: RoleToSocket,
              cancellation: (role: Roles.All, reason?: any) => void,
              initialState: Implementation.S{{ endpoint.efsm.initial_state.id }}) {
    this.wss = wss;
    this.roleToSocket = roleToSocket;
    this.cancellation = cancellation;
    this.initialState = initialState;
    this.activeRoles = new Set([{% for role in endpoint.efsm.other_roles %}Roles.Peers.{{ role ~ (',' if not loop.last else '') }}{% endfor %}]);

    // Bind instance methods.
    this.next = this.next.bind(this);
    this.receive = this.receive.bind(this);
    this.registerMessageHandler = this.registerMessageHandler.bind(this);
    this.send = this.send.bind(this);
    this.cancel = this.cancel.bind(this);
    
    // Bind socket message handler.
    Object.values(Roles.Peers).forEach(role => {
      const socket = this.roleToSocket[role];

      socket.onmessage = this.receive(role);

      socket.onclose = ({ code, reason }) => {

        this.activeRoles.delete(role);

        switch (code) {
          case Cancellation.Receive.NORMAL: {
            // Normal cancellation

            socket.removeAllListeners();
            
            if (this.activeRoles.size === 0) {
              new {{ endpoint.role }}(this.wss, initialState, this.cancellation);
            }

            return;
          }
          case Cancellation.Receive.CLIENT_BROWSER_CLOSED: {
            // Client closed their browser
            this.propagateCancellation(role, 'browser disconnected');
            return;
          }
          case Cancellation.Receive.LOGICAL_ERROR: {
            // Client has logical error
            this.propagateCancellation(role, reason);
            return;
          }
          default: {
            // Unsupported code
            this.propagateCancellation(role, reason);
            return;
          }
        }
      }

    });
    
    Object.values(this.roleToSocket).forEach(socket => {
      socket.send(JSON.stringify(Message.ConnectConfirm));
    });


    // Initialise queues for receiving.
    this.messageQueue = {
      {% for role in endpoint.efsm.other_roles -%}
      [Roles.Peers.{{ role }}]: [],
      {%- endfor %}
    };
    this.handlerQueue = {
      {% for role in endpoint.efsm.other_roles -%}
      [Roles.Peers.{{ role }}]: [],
      {%- endfor %}
    };
    
    // Initialise state machine.
    this.next(initialState);
  }

  // =====================
  // State machine methods
  // =====================
  next(implementation: Implementation.Type) {
    try {
      switch (implementation.type) {
        case 'Send': {
          return implementation.performSend(this.next, this.cancel, this.send);
        }
        case 'Receive': {
          return implementation.prepareReceive(this.next, this.cancel, this.registerMessageHandler);
        }
        case 'Terminal': {
          return;
        }
      }
    } catch (error) {
      this.cancel(error);
    }
  }

  // ===============
  // Channel methods
  // ===============

  send(to: Roles.Peers, label: string, payload: any[], from: Roles.All = Roles.Self) {
    this.roleToSocket[to].send(JSON.stringify(Message.toChannel(from, label, payload)), (error) => {
      if (error !== undefined) {
        if (this.activeRoles.has(to)) {
          throw new Error(`Cannot send to role: ${to}`);
        }
      }
    });
  }

  receive(from: Roles.Peers) {
    return ({ data }: WebSocketMessage) => {
      const { role, label, payload } = JSON.parse(data) as Message.Channel;
      if (role !== Roles.Self) {
        // Route message
        this.send(role, label, payload, from);
      } else {
        const handler = this.handlerQueue[from].shift();
        if (handler !== undefined) {
          handler(data);
        } else {
          this.messageQueue[from].push(data);
        }
      }
    }
  }

  registerMessageHandler(from: Roles.Peers, messageHandler: MessageHandler) {
    const message = this.messageQueue[from].shift();
    if (message !== undefined) {
      messageHandler(message);
    } else {
      this.handlerQueue[from].push(messageHandler);
    }
  }

  /**
    * Propagate explicit cancellation to other roles.
    * 
    * @param cancelledRole 
    */
  propagateCancellation(cancelledRole: Roles.Peers, reason?: any) {

    // Deactivate all roles:
    // a send could be scheduled later, so that needs to be invalidated.
    this.activeRoles.clear();

    try {
      this.cancellation(cancelledRole, reason);
    } finally {
      Object.entries(this.roleToSocket)
        .filter(([role, _]) => role !== cancelledRole)
        .forEach(([_, socket]) => {
          socket.removeAllListeners();
          socket.close(Cancellation.Emit.LOGICAL_ERROR, JSON.stringify(Cancellation.toChannel(cancelledRole, reason)));
        });
      
      new {{ endpoint.role }}(this.wss, this.initialState, this.cancellation);
    }
  }

  cancel(reason?: any) {

    // Deactivate all roles:
    // a send could be scheduled later, so that needs to be invalidated.
    this.activeRoles.clear();

    try {
      this.cancellation(Roles.Self, reason);
    } finally {
      Object.values(this.roleToSocket)
        .forEach(socket => {
          socket.removeAllListeners();
          socket.close(Cancellation.Emit.LOGICAL_ERROR, JSON.stringify(Cancellation.toChannel(Roles.Self, reason)));
        });

      new {{ endpoint.role }}(this.wss, this.initialState, this.cancellation);
    }
  }
}
