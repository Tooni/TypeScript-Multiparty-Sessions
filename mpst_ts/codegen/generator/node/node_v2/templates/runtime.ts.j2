import WebSocket from 'ws';

import {
  MessageHandler,
  isSendState, isReceiveState, isTerminalState,  
} from './Session';
import {
  Roles, Implementation, S{{ endpoint.efsm.initial_state.id }},
  State, SendState, ReceiveState, TerminalState,
  stateModule,
} from './EFSM';

/**
 * Helper types
 *
 * TODO: decouple from this file.
 */
type Partial<T> = { [K in keyof T]: T[K] | undefined }
type RoleToSocket = { [Role in Roles]: WebSocket }

interface WebSocketMessage {
  data: any
  type: string
  target: WebSocket
}

interface JoinMessage {
  connect: Roles
}

/**
 * Joining
 */
export class {{ endpoint.role }}
{

  private wss: WebSocket.Server
  private waiting: Set<Roles>
  private roleToSocket: Partial<RoleToSocket>

  constructor(wss: WebSocket.Server,
              initialState: S{{ endpoint.efsm.initial_state.id }})
  {
    this.wss = wss;
    this.waiting = new Set<Roles>([{% for role in endpoint.efsm.other_roles %}Roles.{{ role ~ (',' if not loop.last else '') }}{% endfor %}])

    this.roleToSocket = {
      {% for role in endpoint.efsm.other_roles -%}
      [Roles.{{ role }}]: undefined,
      {%- endfor %}
    };

    const onSubsribe = (event: WebSocketMessage) => {
      const { data, target: socket } = event;
      const { connect: role } = JSON.parse(data) as JoinMessage;
      if (!this.waiting.has(role)) {
        // Role already occupied
        return;
      }

      this.roleToSocket[role] = socket;
      this.waiting.delete(role);
      socket.removeEventListener('message', onSubsribe);
      if (this.waiting.size === 0) {
        this.wss.removeListener('connection', onConnection);
        for (const socket of Object.values(this.roleToSocket)) {
          socket?.send(JSON.stringify({
            connected: true
          }));
        }
        new _{{ endpoint.role }}(this.wss, this.roleToSocket as RoleToSocket, initialState);
      }
    }

    const onConnection = (ws: WebSocket) => ws.addEventListener('message', onSubsribe);
    this.wss.addListener('connection', onConnection);
  }

}

class _{{ endpoint.role }} {

    private wss: WebSocket.Server
    private roleToSocket: RoleToSocket
    
    private initialState: S{{ endpoint.efsm.initial_state.id }}
    private messageQueue: any[] = []
    private handlerQueue: (MessageHandler)[] = []

    constructor(wss: WebSocket.Server,
                roleToSocket: RoleToSocket,
                initialState: S{{ endpoint.efsm.initial_state.id }}) {
      this.wss = wss;
      this.roleToSocket = roleToSocket;
      this.initialState = initialState;

      // Bind instance methods.
      this.next = this.next.bind(this);
      this.receive = this.receive.bind(this);
      this.send = this.send.bind(this); 
    
      // Bind socket message handler.
      Object.values(this.roleToSocket).forEach(socket => {
        socket.addEventListener('message', this.receive);
      });

      // Initialise queues for receiving.
      this.messageQueue = []
      this.handlerQueue = []

      // Initialise state machine.
      {% if endpoint.efsm.is_send_state(endpoint.efsm.initial_state) -%}
      this.next(SendState.S{{ endpoint.efsm.initial_state.id }})(initialState);
      {% elif endpoint.efsm.is_receive_state(endpoint.efsm.initial_state) -%}
      this.next(ReceiveState.S{{ endpoint.efsm.initial_state.id }})(initialState);
      {% else -%}
      this.next(TerminalState.S{{ endpoint.efsm.initial_state.id }})(initialState);
      {% endif -%}
    }

    // =====================
    // State machine methods
    // =====================
    next<S extends State>(state: S): ((implementation: Implementation<S>) => any) {
      if (isSendState(state)) {
        return this.nextSend(state);
      } else if (isReceiveState(state)) {
        return this.nextReceive(state);
      } else if (isTerminalState(state)) {      
        return this.nextTerminal(state);
      } else {
        throw new Error();
      }
    }

    nextSend<S extends SendState>(state: S): ((implementation: Implementation<S>) => any) {
      // TODO: how to fix this mandatory type assertion?
      // return stateModule[state].buildStateHandler(this.next, this.send);
      return stateModule[state].buildStateHandler(this.next, this.send) as ((implementation: Implementation<S>) => any);
    }

    nextReceive<S extends ReceiveState>(state: S): ((implementation: Implementation<S>) => any) {

      // This callback gets invoked when the receive state builds the message handler
      // correctly typed with respect to the concrete state.
      const onMessageHandlerConstructed = (messageHandler: MessageHandler) => {
        if (this.messageQueue.length > 0) {
          messageHandler(this.messageQueue.shift());
        } else {
          this.handlerQueue.push(messageHandler);
        }
      }

      // return stateModule[state].buildStateHandler(this.next, onMessageHandlerConstructed);
      return stateModule[state].buildStateHandler(this.next, onMessageHandlerConstructed) as ((implementation: Implementation<S>) => any);
    }

    nextTerminal<S extends TerminalState>(state: S): ((implementation: Implementation<S>) => any) {
      return (_: Implementation<S>) => {
        // Close all sockets.
        Object.values(this.roleToSocket).forEach(socket => socket.close());

        return new {{ endpoint.role }}(this.wss, this.initialState);
      }
    }

    // ===============
    // Channel methods
    // ===============

    send(role: Roles, label: string, payload: any[]) {
      this.roleToSocket[role].send(JSON.stringify({ label, payload }));
    }

    receive({ data }: WebSocketMessage) {
      if (this.handlerQueue.length > 0) {
        this.handlerQueue.shift()!(data);
      } else {
        this.messageQueue.push(data);
      }
    }
}
