import React from 'react';

import { State, ReceiveState, SendState, TerminalState, Roles } from './EFSM';
import { MaybePromise, ReceiveHandler } from './Session';

{% for type in endpoint.types -%}
import { {{ type.external ~ ((' as ' ~ type.alias) if type.external != type.alias else '') }} } from "{{ type.path }}";
{% endfor %}

type P = {
  register: (role: Roles, handle: ReceiveHandler) => void
}

enum Labels {
  {% for label in state.labels -%}
  {{ label }} = '{{ label}}',
  {%- endfor %}
}

{% for action in state.actions -%}
type {{ action.label }}Message = {
  label: Labels.{{ action.label }},
  payload: [{{ action.payloads|join(', ') }}],
};
{% endfor %}

type Message = {% for label in state.labels -%}{{ '| ' ~ label ~ 'Message' }}{%- endfor %}

export default abstract class S{{ state.id }}<
  _P = {},
  _S = {},
  _SS = any
> extends React.Component<
  _P & P,
  _S,
  _SS
>
{

  componentDidMount() {
    this.props.register(Roles.{{ state.role }}, this.handle.bind(this));
  }

  handle(message: any): MaybePromise<State> {
    const parsedMessage = JSON.parse(message) as Message;
    switch (parsedMessage.label) {
      {% for action in state.actions -%}
      case Labels.{{ action.label }}: {
        const thunk = () =>
          {%- if endpoint.efsm.is_send_state(action.succ) -%}
          SendState.S{{ action.succ }};
          {%- elif endpoint.efsm.is_receive_state(action.succ) -%}
          ReceiveState.S{{ action.succ }};
          {%- else -%}
          TerminalState.S{{ action.succ }};
          {%- endif %}

        const continuation = this.{{ action.label }}(...parsedMessage.payload);
        if (continuation instanceof Promise) {
          return new Promise((resolve, reject) => {
            continuation.then(() => {
              resolve(thunk());
            }).catch(reject);
          })
        } else {
          return thunk();
        }
      }
      {%- endfor %}
    }
  }

  {% for action in state.actions -%}
  abstract {{ action.label }}({%- for payload in action.payloads -%}{{ 'payload' ~ loop.index ~ ': ' ~ payload ~ ', ' }}{%- endfor -%}): MaybePromise<void>;
  {%- endfor %}

}