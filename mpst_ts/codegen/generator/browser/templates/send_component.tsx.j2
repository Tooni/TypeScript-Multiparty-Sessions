import React from 'react';

import { ReceiveState, SendState, TerminalState } from './EFSM'; 
import { SendComponentFactory, SendComponentFactoryFactory } from './Session';

type P = {
  factory: SendComponentFactoryFactory
}

export abstract class S{{ state.id }}<
  _P = {},
  _S = {},
  _SS = any
> extends React.Component<
  P & _P,
  _S,
  _SS
> {

  {% for action in state.actions -%}
  protected {{ action.label }}: SendComponentFactory<[{{ action.payloads|join(', ') }}]>;
  {% endfor %}
  constructor(props: P & _P) {
    super(props);
    {% for action in state.actions -%}
    {% if efsm.is_send_state(action.succ) -%}
    this.{{ action.label }} = props.factory<[{{ action.payloads|join(', ') }}]>('{{ action.label }}' , SendState.S{{ action.succ }});
    {% elif efsm.is_receive_state(action.succ) -%}
    this.{{ action.label }} = props.factory<[{{ action.payloads|join(', ') }}]>('{{ action.label }}' , ReceiveState.S{{ action.succ }});
    {% else -%}
    this.{{ action.label }} = props.factory<[{{ action.payloads|join(', ') }}]>('{{ action.label }}' , TerminalState.S{{ action.succ }});
    {% endif -%}
    {% endfor %}
  }
}